b.g <- mean(dat$beta[which(dat$n == "gd" & dat$P < a)])
# cuadro para imprimir
err.df <-
data.frame(
par = c("error.1", "R.promedio", "beta.promedio"),
pq = c(Err.p, R.p, b.p),
gd = c(Err.g, R.g, b.g)
)
# agreguemos una columna indicando si la prueba es significativa
for (i in 1:(2 * N)) {
ifelse(dat$P[i] >= a, dat$S[i] <-
"N.S.", dat$S[i] <- "Significativo")
}
# graficamos los histogramas de R para cada tamanio de muestra y en pruebas N.S. o significativas
p <-
ggplot(data = dat, aes(x = R, colour = n, fill = n)) + geom_histogram(
bins = 50,
position = "identity",
alpha = 0.5,
lwd = 0.2
) +
theme_minimal(base_size = 16) + facet_wrap( ~ S, scales = "free") +
scale_colour_manual(values = c("#BDB76B", "#32CD32")) +
scale_fill_manual(values = c("#BDB76B", "#32CD32"))
p
# resultado
cat("Comparacion entre tamanios de muestra\n")
out <- list(err.df, p)
return(out)
}
trampa3(N = 1000)
library(Lme4)
install.packages("lme4")
library(Lme4)
library(ggplot2)
trampa3 <-
function(
# promedio de x
m1 = 0,
# desviacion de x
sd1 = 1,
# promedio de y
m2 = m1,
# desviacion de y
sd2 = sd1,
# n de muestra pequenia
np = 10,
# n de de muestra grande
ng = 30,
# n de simulaciones
N,
# alpha
a = 0.05) {
# Crear vectores para los valores de P, R y beta
V.P  <- NULL
V.R <- NULL
V.b <- NULL
# n pequenio
for (i in 1:N) {
# Simulamos dos variables independientes
x.p <- rnorm(n = np, mean = m1, sd = sd1)
y.p <- rnorm(n = np, mean = m2, sd = sd2)
# x explica y?
M.p <- lm(y.p ~ x.p)
S.p <- summary(M.p)
# extraemos valor de P
P.p <- S.p$coefficients[2, 4]
# extraemos R
R.p <- S.p$adj.r.squared
# extraemos pendiente
beta.p <- S.p$coefficients[2, 2]
# agregamos los valores a los vectores correspondientes
V.P <- append(x = V.P, values = P.p)
V.R <- append(x = V.R, values = R.p)
V.b <- append(x = V.b, values = beta.p)
}
# n grande
for (i in 1:N) {
# Simulamos dos variables independientes
x.g <- rnorm(n = ng, mean = m1, sd = sd1)
y.g <- rnorm(n = ng, mean = m2, sd = sd2)
# x explica y?
M.g <- lm(y.g ~ x.g)
S.g <- summary(M.g)
# extraemos valor de P
P.g <- S.g$coefficients[2, 4]
# extraemos R
R.g <- S.g$adj.r.squared
# extraemos pendiente
beta.g <- S.g$coefficients[2, 2]
# aagregamos los valores a los vectores correspondientes
V.P <- append(x = V.P, values = P.g)
V.R <- append(x = V.R, values = R.g)
V.b <- append(x = V.b, values = beta.g)
}
# juntamos todo
dat <-
data.frame(
n = rep(c("pq", "gd"), each = N),
P = V.P,
R = V.R,
beta = V.b
)
# proporcion de resultados significativos
Err.p <- length(which(dat$n == "pq" & dat$P < a)) / N
Err.g <- length(which(dat$n == "gd" & dat$P < a)) / N
# R promedio de falsos positivos
R.p <- mean(dat$R[which(dat$n == "pq" & dat$P < a)])
R.g <- mean(dat$R[which(dat$n == "gd" & dat$P < a)])
# beta promedio de falsos positivos
b.p <- mean(dat$beta[which(dat$n == "pq" & dat$P < a)])
b.g <- mean(dat$beta[which(dat$n == "gd" & dat$P < a)])
# cuadro para imprimir
err.df <-
data.frame(
par = c("error.1", "R.promedio", "beta.promedio"),
pq = c(Err.p, R.p, b.p),
gd = c(Err.g, R.g, b.g)
)
# agreguemos una columna indicando si la prueba es significativa
for (i in 1:(2 * N)) {
ifelse(dat$P[i] >= a, dat$S[i] <-
"N.S.", dat$S[i] <- "Significativo")
}
# graficamos los histogramas de R para cada tamanio de muestra y en pruebas N.S. o significativas
p <-
ggplot(data = dat, aes(x = R, colour = n, fill = n)) + geom_histogram(
bins = 50,
position = "identity",
alpha = 0.5,
lwd = 0.2
) +
theme_minimal(base_size = 16) + facet_wrap( ~ S, scales = "free") +
scale_colour_manual(values = c("#BDB76B", "#32CD32")) +
scale_fill_manual(values = c("#BDB76B", "#32CD32"))
p
# resultado
cat("Comparacion entre tamanios de muestra\n")
out <- list(err.df, p)
return(out)
}
trampa3(N = 1000)
trampa3 <-
function(
# promedio de x
m1 = 0,
# desviacion de x
sd1 = 1,
# promedio de y
m2 = m1,
# desviacion de y
sd2 = sd1,
# n de muestra pequenia
np = 10,
# n de de muestra grande
ng = 100,
# n de simulaciones
N,
# alpha
a = 0.05) {
# Crear vectores para los valores de P, R y beta
V.P  <- NULL
V.R <- NULL
V.b <- NULL
# n pequenio
for (i in 1:N) {
# Simulamos dos variables independientes
x.p <- rnorm(n = np, mean = m1, sd = sd1)
y.p <- rnorm(n = np, mean = m2, sd = sd2)
# x explica y?
M.p <- lm(y.p ~ x.p)
S.p <- summary(M.p)
# extraemos valor de P
P.p <- S.p$coefficients[2, 4]
# extraemos R
R.p <- S.p$adj.r.squared
# extraemos pendiente
beta.p <- S.p$coefficients[2, 2]
# agregamos los valores a los vectores correspondientes
V.P <- append(x = V.P, values = P.p)
V.R <- append(x = V.R, values = R.p)
V.b <- append(x = V.b, values = beta.p)
}
# n grande
for (i in 1:N) {
# Simulamos dos variables independientes
x.g <- rnorm(n = ng, mean = m1, sd = sd1)
y.g <- rnorm(n = ng, mean = m2, sd = sd2)
# x explica y?
M.g <- lm(y.g ~ x.g)
S.g <- summary(M.g)
# extraemos valor de P
P.g <- S.g$coefficients[2, 4]
# extraemos R
R.g <- S.g$adj.r.squared
# extraemos pendiente
beta.g <- S.g$coefficients[2, 2]
# aagregamos los valores a los vectores correspondientes
V.P <- append(x = V.P, values = P.g)
V.R <- append(x = V.R, values = R.g)
V.b <- append(x = V.b, values = beta.g)
}
# juntamos todo
dat <-
data.frame(
n = rep(c("pq", "gd"), each = N),
P = V.P,
R = V.R,
beta = V.b
)
# proporcion de resultados significativos
Err.p <- length(which(dat$n == "pq" & dat$P < a)) / N
Err.g <- length(which(dat$n == "gd" & dat$P < a)) / N
# R promedio de falsos positivos
R.p <- mean(dat$R[which(dat$n == "pq" & dat$P < a)])
R.g <- mean(dat$R[which(dat$n == "gd" & dat$P < a)])
# beta promedio de falsos positivos
b.p <- mean(dat$beta[which(dat$n == "pq" & dat$P < a)])
b.g <- mean(dat$beta[which(dat$n == "gd" & dat$P < a)])
# cuadro para imprimir
err.df <-
data.frame(
par = c("error.1", "R.promedio", "beta.promedio"),
pq = c(Err.p, R.p, b.p),
gd = c(Err.g, R.g, b.g)
)
# agreguemos una columna indicando si la prueba es significativa
for (i in 1:(2 * N)) {
ifelse(dat$P[i] >= a, dat$S[i] <-
"N.S.", dat$S[i] <- "Significativo")
}
# graficamos los histogramas de R para cada tamanio de muestra y en pruebas N.S. o significativas
p <-
ggplot(data = dat, aes(x = R, colour = n, fill = n)) + geom_histogram(
bins = 50,
position = "identity",
alpha = 0.5,
lwd = 0.2
) +
theme_minimal(base_size = 16) + facet_wrap( ~ S, scales = "free") +
scale_colour_manual(values = c("#BDB76B", "#32CD32")) +
scale_fill_manual(values = c("#BDB76B", "#32CD32"))
p
# resultado
cat("Comparacion entre tamanios de muestra\n")
out <- list(err.df, p)
return(out)
}
trampa3(N = 1000)
trampa3(N = 1000, ng = 100)
trampa4 <-
function(# promedio de x
m1 = 0,
# desviacion de x
sd1 = 1,
# tamaÃ±o de muestra
n1 = 100,
# numero de pruebas
ntest = 5,
# n de simulaciones
N,
# alpha
a = 0.05) {
# crear un vector para la siginficancia de la prueba
V.P  <- NULL
# simulemos
for (i in 1:N) {
# variable de respuesta
y <- rnorm(n = n1, mean = m1, sd = sd1)
# vector para los valores de p
V.p <- NULL
# un analisis con cada predictor
for (j in 1:ntest) {
M <-  lm (y ~ rnorm(n = n1, mean = m1, sd = sd1))
S <- summary(M)
V.p <- append(x = V.p, values = S$coefficients[2, 4])
}
# registremos si hay al menos un resultado significativo
ifelse(test = any(V.p < a),
yes = V.P[i] <- 1,
no = V.P[i] <- 0)
}
# errir tipo 1 con n comparaciones
err <- length(which(V.P == 1)) / N
cat("Tasa de error tipo 1\n")
return(err)
}
trampa4(ntest = 5, N = 1000)
trampa4(ntest = 10, N = 1000)
trampa4(ntest = 30, N = 1000)
trampa4(ntest = 50, N = 1000)
trampa4(ntest = 50, N = 1000, a = 0,02)
trampa4(ntest = 50, N = 1000, a = 0,02)
trampa5 <-
function(
# promedio de x
m1 = 0,
# desviacion de x
sd1 = 1,
# tamaÃ±o de muestra
n1 = 100,
# n de simulaciones
N,
# alpha
a = 0.05) {
# Crear vectores para los valores de P, R y beta
V.E  <- NULL
# simulemos
for (i in 1:N) {
# variable de respuesta
y <- rnorm(n = n1, mean = m1, sd = sd1)
#vector con para guardar valores de P
V.P <- NULL
j <- 1
# hagamos pruebas con predictores independientes, hasta que alguno de significativo
repeat {
M <-  lm (y ~ rnorm(n = n1, mean = m1, sd = sd1))
S <- summary(M)
V.P <- append(x = V.P, values = S$coefficients[2, 4])
if (V.P[j] >= a){
j <- j +1} else {break}
}
len.P <- length(V.P)
V.E <- append (x = V.E, values = len.P)
}
# grafiquemos el histograma
hist(V.E,
main = "",
xlab = "NÃºmero de pruebas para llegar a p < 0.05",
ylab = "Frequencia")
}
trampa5(N = 1000)
install.packages("DAAG")
install.packages("gridExtra")
require(gridExtra)
library(gridExtra)
library(DAAG)
trampa6 <- function(
# intercepto
a = 0,
# coeficiente lineal
b = 2,
# tamanio de muestra
n = 50,
# valor en x para la prediccion
P = 0.5,
# numero de simulaciones
N = 1000) {
# vectores para deviance
V.D1 <- NULL
V.D2 <- NULL
# vectores para valores predichos
V.P1 <- NULL
V.P2 <- NULL
# simulemos
for (i in 1:N) {
# x puede tomar cualquier valor entre 0 y 1
x <- runif(n = n, min = 0, max = 1)
# usamos una funcion del paquete DAAG para simular la respuesta de acuerdo con Poisson
dat <- poissonsim(x = x, a = a, b = b)
# ahora analizamos los resultados como si los errores fueran normales
M.1 <- glm(y ~ x, family = "gaussian", data = dat)
S.1 <- summary.glm(M.1)
# deviance del modelo con el predictor
V.D1 <- append (x = V.D1, values = S.1$deviance)
# numero de parasitos esperados cuando x = P
P1 <-
predict.glm(object = M.1,
newdata = data.frame(x = P),
type = "response")
V.P1 <- append (x = V.P1, values = P1)
# ahora analizamos con la estructura de error que corresponde
M.2 <- glm(y ~ x, family = "poisson", data = dat)
S.2 <- summary(M.2)
# deviance del modelo con el predictor
V.D2 <- append (x = V.D2, values = S.2$deviance)
# numero de parasitos esperados cuando x = P
P2 <-
predict.glm(object = M.2,
newdata = data.frame(x = P),
type = "response")
V.P2 <- append (x = V.P2, values = P2)
}
# juntamos todo
err.df <-
data.frame(
modelo = rep(c("normal", "poisson"), each = N),
Deviance = c(V.D1, V.D2),
Prediction = c(V.P1, V.P2)
)
#graficamos los datos en la escala original
p1 <-
ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3,
color =  "#32CD32",
alpha = 0.5) +
theme_minimal(base_size = 16)
# graficamos los histogramas de cada modelo para "deviance" y los valores predichos
p2 <-
ggplot(data = err.df, aes(x = Deviance, colour = modelo, fill = modelo)) + geom_histogram(
bins = 50,
position = "identity",
alpha = 0.5,
lwd = 0.2
) +
theme_minimal(base_size = 16) +
scale_colour_manual(values = c("#BDB76B", "#32CD32")) +
scale_fill_manual(values = c("#BDB76B", "#32CD32")) +
geom_vline(
xintercept = n - 2,
size = 1,
lty = 2,
colour = "grey20"
)
p3 <-
ggplot(data = err.df, aes(x = Prediction, colour = modelo, fill = modelo)) + geom_histogram(
bins = 50,
position = "identity",
alpha = 0.5,
lwd = 0.2
) +
theme_minimal(base_size = 16) +
scale_colour_manual(values = c("#BDB76B", "#32CD32")) +
scale_fill_manual(values = c("#BDB76B", "#32CD32")) +
xlab("PredicciÃ³n para x = P")
grid.arrange(p1, p2, p3, ncol = 1)
}
trampa6(N = 1000, b = 2)
trampa6(N = 1000, b = 8)
rm(list = ls())1
rm(list = ls())
setwd("C:/Users/MASTER/Desktop/Tarea4")
Tarea4 <- read.csv("Datos_tarea4.csv", sep = ",")
Hs <- c(H1, H2, H3, H4, H5)
Hs <- c(H1, H2, H3, H4, H5, data = Tarea4)
Hs <- c(Tarea4$H1, Tarea4$H2)
Hs <- c(Tarea4$H1, Tarea4$H2, Tarea4$H3, Tarea4$H4, Tarea4$H5)
mod_poisson <- glm(D ~ . - Hs, data = Tarea4, family = "poisson")
mod_poisson <- glm(Tarea4$D ~ . - Hs, family = "poisson")
Hssssssss <- c(Tarea4$H1, Tarea4$H2, Tarea4$H3, Tarea4$H4, Tarea4$H5)
mod_poisson <- glm(Tarea4$D ~ . - Hssssssss, family = "poisson")
rm(list = ls())
setwd("C:/Users/MASTER/Desktop/Tarea4")
Tarea4 <- read.csv("Datos_tarea4.csv", sep = ",")
mod_poisson <- glm(D ~ . - H2, data = Tarea4, family = "poisson")
View(mod_poisson)
library(readr)
rm(list = ls())
library(readr)
setwd("C:/Users/MASTER/Desktop/Tarea4")
Tarea4 <- read.csv("Datos_tarea4.csv", sep = ",")
mod_poisson <- glm(D ~ . - H2, data = Tarea4, family = "poisson")
mod_poisson <- glm(D ~ .  H2, data = Tarea4, family = "poisson")
mod_poisson <- glm(D ~ . H2, data = Tarea4, family = "poisson")
mod_poisson <- glm(D ~ H2, data = Tarea4, family = "poisson")
mod_poisson <- glm(D ~ . - H2, data = Tarea4, family = "poisson")
View(mod_poisson)
setwd("C:/Users/MASTER/Desktop/Intento de poisson")
galapagos <- read_csv("galapagos.csv")
View(galapagos)
mod_poisson <- glm(sp ~ . - isla, data = galapagos, family = "poisson")
View(mod_poisson)
summary(mod_poisson)
exp(mod_poisson$coefficients)
mod_quasipoisson <- glm(sp ~ . - isla, data = galapagos,
family = "quasipoisson")
summary(mod_quasipoisson)
cbind(mod_poisson$coefficients, mod_quasipoisson$coefficients)
summary(mod_poisson)$disp
summary(mod_quasipoisson)$disp
View(Tarea4)
install.packages("dplyr")
library(dplyr)
setwd("C:/Users/MASTER/Desktop/Tarea4")
Tarea4 <- read.csv("Datos_tarea4.csv", sep = ",")
library(dplyr)
filter(Tarea4, A == "1")
A1 <- data.frame(Tarea4, A == "1")
A1 <- c(Tarea4, A == "1")
transmute(Tarea4, A == "1")
grupos <- group_by(Tarea4, A == "1")
View(grupos)
summarise(grupos)
rm(list = ls())
modelo_glmA <- glm(D ~ A, data = Tarea4, family = quasipoisson)
summary(modelo_glmA)
modelo_glmP <- glm(D ~ P, data = Tarea4, family = quasipoisson)
summary(modelo_glmP)
modelo_glmL <- glm(D ~ L, data = Tarea4, family = quasipoisson)
summary(modelo_glmL)
modelo_glmH1 <- glm(D ~ H1, data = Tarea4, family = quasipoisson)
summary(modelo_glmH1)
modelo_glmH2 <- glm(D ~ H2, data = Tarea4, family = quasipoisson)
summary(modelo_glmH2)
modelo_glmH3 <- glm(D ~ H3, data = Tarea4, family = quasipoisson)
summary(modelo_glmH3)
summary(modelo_glmH3)
modelo_glmH4 <- glm(D ~ H4, data = Tarea4, family = quasipoisson)
summary(modelo_glmH4)
summary(modelo_glmH4)
modelo_glmH5 <- glm(D ~ H5, data = Tarea4, family = quasipoisson)
summary(modelo_glmH5)
```{r}
modelo_glmP1 <- glm(P ~ H1, data = Tarea4, family = quasipoisson)
summary(modelo_glmP1)
modelo_glmP2 <- glm(P ~ H2, data = Tarea4, family = quasipoisson)
summary(modelo_glmP2)
modelo_glmP3 <- glm(P ~ H3, data = Tarea4, family = quasipoisson)
summary(modelo_glmP3)
modelo_glmP4 <- glm(P ~ H4, data = Tarea4, family = quasipoisson)
summary(modelo_glmP4)
modelo_glmP5 <- glm(P ~ H5, data = Tarea4, family = quasipoisson)
summary(modelo_glmP5)
